<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\UserBundle\Entity;

use Sonata\UserBundle\Entity\BaseUser as BaseUser;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\HttpFoundation\File\UploadedFile as UploadedFile;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class User extends BaseUser
{
    /**
     * @var integer $id
     */
    protected $id;

    /**
     * @var string
     *
     */
    //ex: file_name.jpg
    protected $avatar;
    /**
     * Get id
     *
     * @return integer $id
     */

    private $avatar_old;
    /**
     * @Assert\File(maxSize="6000000")
     */
    protected  $file;

    public function getId()
    {
        return $this->id;
    }
    /**
     * Set avatar
     *
     * @param string $avatar
     * @return User
     */
    public function setAvatar($avatar)
    {
        $this->avatar = $avatar;

        return $this;
    }

    /**
     * Get avatar
     *
     * @return string
     */
    public function getAvatar()
    {
        return $this->avatar;
    }

    /**
     * Sets file.
     *
     * @param UploadedFile $file
     */
    public function setFile(UploadedFile $file = null)
    {
        $this->file = $file;
        // check if we have an old image path
        if (isset($this->avatar)) {
            // store the old name to delete after the update
            $this->avatar_old = $this->avatar;
            $this->avatar = null;
        } else {
            $this->avatar = 'initial';
        }
    }

    /*
     * PrePersist()
     * PreUpdate()
     */
    public function preUpload()
    {
        if (null === $this->file)
            return;
        // do whatever you want to generate a unique name
        //$filename = sha1(uniqid(mt_rand(), true));
        $new_avatar_file_name = $this->getId().'_'.$this->getUsername();
        $this->avatar = $new_avatar_file_name.'.'.$this->getFile()->guessExtension();

    }

    /**
     * Get file.
     *
     * @return UploadedFile
     */
    public function getFile()
    {
        return $this->file;
    }

    public function getAbsolutePath()
    {
        return null === $this->avatar ? null : $this->getUploadRootDir().'/'.$this->avatar;
    }

    public function getWebPath()
    {
        return null === $this->avatar ? null : $this->getUploadDir().'/'.$this->avatar;
    }

    protected function getUploadRootDir()
    {
        // the absolute directory path where uploaded documents should be saved
        return __DIR__.'/../../../../../web/'.$this->getUploadDir();
    }

    protected function getUploadDir()
    {
        // get rid of the __DIR__ so it doesn't screw when displaying uploaded doc/image in the view.
        return 'uploads/avatars';
    }

    /*
     * PostPersist()
     * PostUpdate()
     */
    public function upload()
    {
        // the file property can be empty if the field is not required
        if (null === $this->file) {
            return;
        }

        // if there is an error when moving the file, an exception will
        // be automatically thrown by move(). This will properly prevent
        // the entity from being persisted to the database on error
        // move takes the target directory and then the target filename to move to
        $this->file->move($this->getUploadRootDir(), $this->avatar);

        // check if we have an old image
        if (isset($this->avatar_old)) {
            // delete the old image
            if (file_exists($this->getUploadRootDir().'/'.$this->avatar_old))
                unlink($this->getUploadRootDir().'/'.$this->avatar_old);
            // clear the temp image path
            $this->avatar_old = null;
        };

        // clean up the file property as you won't need it anymore
        $this->file = null;
    }
    /*
     * PostRemove()
     */
    public function removeUpload()
    {
        if ($file = $this->getAbsolutePath()) {
            unlink($file);
        }
    }
}